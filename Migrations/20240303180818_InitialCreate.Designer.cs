// <auto-generated />
using System;
using Coursework.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseWork.Migrations
{
    [DbContext(typeof(ClinicContext))]
    [Migration("20240303180818_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Coursework.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("doctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("patientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppointmentId");

                    b.HasIndex("doctorId");

                    b.HasIndex("patientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Coursework.Models.Bill", b =>
                {
                    b.Property<int>("billId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("billAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("billDate")
                        .HasColumnType("TEXT");

                    b.HasKey("billId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Coursework.Models.Department", b =>
                {
                    b.Property<int>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("departmentName")
                        .HasColumnType("INTEGER");

                    b.HasKey("departmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Coursework.Models.Doctor", b =>
                {
                    b.Property<int>("doctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("departmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("doctorName")
                        .HasColumnType("TEXT");

                    b.HasKey("doctorId");

                    b.HasIndex("departmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Coursework.Models.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("contact")
                        .HasColumnType("TEXT");

                    b.Property<int?>("patientAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("patientName")
                        .HasColumnType("TEXT");

                    b.HasKey("patientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Coursework.Models.Appointment", b =>
                {
                    b.HasOne("Coursework.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("doctorId");

                    b.HasOne("Coursework.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("patientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Coursework.Models.Doctor", b =>
                {
                    b.HasOne("Coursework.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });
#pragma warning restore 612, 618
        }
    }
}
